
---------------------------------------------
DECLARE PULLDATA_HRISCache SHARED ROW;
DECLARE isPULLDATA_HRISCacheExist SHARED BOOLEAN FALSE;

CREATE COMPUTE MODULE MSGBUS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		CALL setConfigurableProperties();
		SET OutputRoot.Properties.CodedCharSetId = InputRoot.MQMD.CodedCharSetId;
		SET OutputRoot.Properties.Encoding = InputRoot.MQMD.Encoding;
		--CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';
		CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'MQRFH2';
		SET OutputRoot.MQRFH2.(MQRFH2.Field)Version = 2;
		SET OutputRoot.MQRFH2.(MQRFH2.Field)Format = 'MQHRF2';
		SET OutputRoot.MQRFH2.(MQRFH2.Field)NameValueCCSID = 1208;
		--SET OutputRoot.MQRFH2.usr.BusinessID = COALESCE(Environment.Variable.SelectQueryOutput.vw_employee_for_IDM.EMPLOYEE_ID, '');
		SET OutputRoot.MQRFH2.usr.BusinessID = CURRENT_TIMESTAMP;
		SET OutputRoot.MQRFH2.usr.ID = CURRENT_TIMESTAMP;
		SET OutputRoot.MQRFH2.usr.PROP_CCSID = InputRoot.Properties.CodedCharSetId;
		SET OutputRoot.MQRFH2.usr.PROP_ENCOD = InputRoot.Properties.Encoding;

		SET Environment.Prpoerties = InputRoot.Properties;
		SET Environment.MQMD = InputRoot.MQMD;
		SET Environment.MQRFH2=OutputRoot.MQRFH2;

		RETURN TRUE;
	END;

	CREATE PROCEDURE setConfigurableProperties() BEGIN



		IF isPULLDATA_HRISCacheExist THEN

		ELSE
			--SET Environment.Variables.Destination[] = SELECT T.IDENTIFIER,T.ATTRIBUTES FROM Database.dbo.ESB_CONFIG as T WHERE T.INTERFACE= 'HRIS';
			
			SET Environment.Variables.Destination[] = SELECT T.IDENTIFIER,T.ATTRIBUTES FROM Database.ESB_CONFIG as T WHERE T.INTERFACE= 'HRIS';

			DECLARE noOfRecords INTEGER CARDINALITY(Environment.Variables.Destination[]);

			IF noOfRecords ='0' THEN
				THROW USER EXCEPTION MESSAGE 1000 VALUES
				('No Rows found in ESB_CONFIG for interface-HRIS to fetch');
			END IF;

			DECLARE Y INTEGER 1;

			WHILE Y <= noOfRecords DO

				IF Environment.Variables.Destination[Y].IDENTIFIER ='FROM_EMAIL' THEN
					SET PULLDATA_HRISCache.FROM_EMAIL = Environment.Variables.Destination[Y].ATTRIBUTES;
				END IF;

				IF Environment.Variables.Destination[Y].IDENTIFIER ='TO_EMAIL' THEN
					SET PULLDATA_HRISCache.TO_EMAIL = Environment.Variables.Destination[Y].ATTRIBUTES;
				END IF;

				IF Environment.Variables.Destination[Y].IDENTIFIER ='SUBJECT' THEN
					SET PULLDATA_HRISCache.SUBJECT = Environment.Variables.Destination[Y].ATTRIBUTES;
				END IF;
				IF Environment.Variables.Destination[Y].IDENTIFIER ='SCHEMA' THEN
					SET PULLDATA_HRISCache.SCHEMA = Environment.Variables.Destination[Y].ATTRIBUTES;
				END IF;

				SET Y = Y + 1;

			END WHILE;

			SET isPULLDATA_HRISCacheExist = TRUE;

		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
----------------------------------------------------------------------
CREATE COMPUTE MODULE PULL_DATA_HRIS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		/**************************************************************************************************************************
		1. SELECT Query to retrive all the data from the "vw_employee_for_IDM" table
		**************************************************************************************************************************/
		DECLARE SCHEMA_NAME CHARACTER PULLDATA_HRISCache.SCHEMA;

		IF LENGTH(SCHEMA_NAME) = 0 OR upper(SCHEMA_NAME) = 'NONE' OR upper(SCHEMA_NAME) = 'NOSCHEMA' THEN
			SET Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[] = select * from Database.vw_employee_for_IDM ;
			--SET Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[] = select * from Database.vw_employee_for_IDM AS T where T.employee_id='000320571';
		ELSE
			SET Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[] = select * from Database.{SCHEMA_NAME}.vw_employee_for_IDM ;
			--SET Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[] = select * from Database.{SCHEMA_NAME}.vw_employee_for_IDM AS T where T.employee_id='000320571';
		END IF;

		DECLARE noOfRecordsCount INTEGER CARDINALITY(Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[]);

		IF noOfRecordsCount ='0' THEN
			-- THROW USER EXCEPTION MESSAGE 1000 VALUES
			-- ('No Rows found in the table vw_employee_for_IDM for HRIS interface to fetch');
			DECLARE cr CHAR CAST(CAST(X'0A' AS BLOB) AS CHAR CCSID 1208);
			DECLARE tab CHAR CAST(CAST(X'09' AS BLOB) AS CHAR CCSID 1208);
			DECLARE newline CHAR CAST(CAST(X'0A' AS BLOB) AS CHAR CCSID 1208);


			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.EmailOutputHeader.Subject = 'HRIS - IDM,No Rows To Fetch from HRIS Database';
			SET OutputRoot.EmailOutputHeader.From = PULLDATA_HRISCache.FROM_EMAIL;
			SET OutputRoot.EmailOutputHeader.To = PULLDATA_HRISCache.TO_EMAIL;


			DECLARE ErrorMsg CHARACTER 'Integration: HRIS IDM PULL DATA'
			||newline
			||newline
			||'No rows to fetch from HRIS DB for the extract ran on'
			||SUBSTRING(CAST(CURRENT_TIMESTAMP AS CHARACTER) AFTER 'TIMESTAMP');
			SET OutputRoot.BLOB.BLOB = CAST(ErrorMsg AS BLOB CCSID 1208 ENCODING 576);

			PROPAGATE TO TERMINAL 'out2';

		ELSE
			CREATE FIELD Environment.Variable.MAXDATEVARIABLE;
			DECLARE envRef3 REFERENCE TO Environment.Variable.MAXDATEVARIABLE;

			DECLARE envRef4 REFERENCE TO Environment.Variable.SelectQueryOutput;
			DECLARE ACTUAL_MAXVALUE CHARACTER;

			SET envRef3.MAXDATEVARIABLE_RESULT[1].MAXDATEVARIABLE = SELECT MAX(COALESCE(T.EMPLOYMENT_LAST_MODIFIED_ON,'')) FROM envRef4.vw_employee_for_IDM[] AS T;
			SET envRef3.MAXDATEVARIABLE_RESULT[2].MAXDATEVARIABLE = SELECT MAX(COALESCE(T.JOB_LAST_MODIFIED_ON ,'')) FROM envRef4.vw_employee_for_IDM[] AS T;
			SET envRef3.MAXDATEVARIABLE_RESULT[3].MAXDATEVARIABLE = SELECT MAX(COALESCE(T.PERSONAL_LAST_MODIFIED_ON,'')) FROM envRef4.vw_employee_for_IDM[] AS T;
			SET envRef3.MAXDATEVARIABLE_RESULT[4].MAXDATEVARIABLE = SELECT MAX(COALESCE(T.PHONE_PERS_LAST_MODIFIED_ON,'')) FROM envRef4.vw_employee_for_IDM[] AS T;

			SET ACTUAL_MAXVALUE = SELECT MAX(T.MAXDATEVARIABLE) FROM Environment.Variable.MAXDATEVARIABLE.MAXDATEVARIABLE_RESULT[] AS T;
			/**************************************************************************************************************************
			3. UPDATE Query to update the "lkp_infa_dml" table with above selected maximum date
			**************************************************************************************************************************/
			DECLARE YYYY,MM,DD,TT_H,TT_M,TT_S,EXTRACTED_DATE CHARACTER;
			SET MM = SUBSTRING(ACTUAL_MAXVALUE FROM 6 FOR 2);
			SET YYYY = SUBSTRING(ACTUAL_MAXVALUE FROM 1 FOR 4);
			SET DD = SUBSTRING(ACTUAL_MAXVALUE FROM 9 FOR 2);
			SET TT_H = SUBSTRING(ACTUAL_MAXVALUE FROM 12 FOR 2);
			SET TT_M = SUBSTRING(ACTUAL_MAXVALUE FROM 15 FOR 2);
			SET TT_S = SUBSTRING(ACTUAL_MAXVALUE FROM 18 FOR 2);

			SET Environment.Variable.EXTRACT_DATE = YYYY||MM||DD||TT_H||TT_M||TT_S;
			SET Environment.Variable.EXTRACTED_DATE = '''YYYYMMDDHH24MISS''';
			SET Environment.Variable.SCRIPT_ID = '''4''';

			SET Environment.Variable.SEQ_NUM = '''4''';
			DECLARE Update_Query_1 CHARACTER 'UPDATE lkp_infa_dml SET extract_date = to_date('||Environment.Variable.EXTRACT_DATE||','||Environment.Variable.EXTRACTED_DATE||') WHERE script_id = '||Environment.Variable.SCRIPT_ID ||' AND seq_num = '||Environment.Variable.SEQ_NUM || ' AND to_date('||Environment.Variable.EXTRACT_DATE||','||Environment.Variable.EXTRACTED_DATE||') > extract_date';
			PASSTHRU(Update_Query_1);
			COMMIT;

			DECLARE RECORD_LAST_MODIFIED_MAXVALUE CHARACTER;
			SET RECORD_LAST_MODIFIED_MAXVALUE = '''' || SELECT MAX(COALESCE(T.RECORD_LAST_MODIFIED_ON,'')) FROM envRef4.vw_employee_for_IDM[] AS T || '''';
			SET Environment.Variable.SEQ_NUM_1 = '''1''';
			SET Environment.Variable.RECORD_LAST_MODIFIED_FORMAT = '''DD-MM-YYYY HH24:MI:SS''';
			DECLARE Update_Query_2 CHARACTER 'UPDATE lkp_infa_dml SET extract_date = to_date('||RECORD_LAST_MODIFIED_MAXVALUE||','||Environment.Variable.RECORD_LAST_MODIFIED_FORMAT||') WHERE script_id = '||Environment.Variable.SCRIPT_ID ||' AND seq_num = '||Environment.Variable.SEQ_NUM_1 || ' AND to_date('||RECORD_LAST_MODIFIED_MAXVALUE||','||Environment.Variable.RECORD_LAST_MODIFIED_FORMAT||') > extract_date';
			--DECLARE II INTEGER 1;
			PASSTHRU(Update_Query_2);
			COMMIT;

			DECLARE noOfRecordsLoop INTEGER 0;
			WHILE noOfRecordsLoop < noOfRecordsCount DO
				SET noOfRecordsLoop = noOfRecordsLoop + 1;
				/**************************************************************************************************************************
				4. Publishing the Output Data
				*************************************************************************************************************************/
				SET OutputRoot.Properties = InputRoot.Properties;
				SET OutputRoot.MQMD = InputRoot.MQMD;
				SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
				SET OutputRoot.MQRFH2.usr.BusinessID=Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].EMPLOYEE_ID;
				SET OutputRoot.MQRFH2.usr.ID=Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].EMPLOYEE_ID;
				SET OutputRoot.XMLNSC.HRISData[1] = Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop];
			
				SET Environment.XMLNSC.HRISData = OutputRoot.XMLNSC.HRISData[1];
				-- Twilio changes
				-- DECLARE TMP_SMS_NUM BOOLEAN;
				-- SET TMP_SMS_NUM = EXISTS(Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].TMP_SMS_NUM[]);
				-- IF TMP_SMS_NUM = FALSE AND (Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].SMS_FLAG = 'Y') THEN
				-- PROPAGATE TO TERMINAL 'out3' DELETE NONE;
				-- Update Database.OUTBOUND_HRIS_USER.STG_HRIS_PERSON AS A SET TMP_SMS_NUM = 'Pending' where A.PERSON_ID_EXTERNAL = Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].EMPLOYEE_ID;
				-- ELSE IF TMP_SMS_NUM = TRUE OR Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].TMP_SMS_NUM='Pending' AND
				-- (Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].SMS_FLAG = 'N') THEN
				-- PROPAGATE TO TERMINAL 'out4' DELETE NONE;
				-- Update Database.OUTBOUND_HRIS_USER.STG_HRIS_PERSON AS A SET TMP_SMS_NUM = NULL where A.PERSON_ID_EXTERNAL = Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].EMPLOYEE_ID;
				-- END IF;
				-- END IF;
				DECLARE BOOL_TMP_SMS_NUM BOOLEAN;
				SET BOOL_TMP_SMS_NUM = EXISTS(Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].TMP_SMS_NUM[]);
				IF BOOL_TMP_SMS_NUM = FALSE AND (Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].SMS_FLAG = 'Y') THEN
					PROPAGATE TO TERMINAL 'out3' DELETE NONE; -- Twilio Create
					Update Database.OUTBOUND_HRIS_USER.STG_HRIS_PERSON AS A SET TMP_SMS_NUM = 'Pending' where A.PERSON_ID_EXTERNAL = Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].EMPLOYEE_ID;
				ELSEIF (BOOL_TMP_SMS_NUM = TRUE AND Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].TMP_SMS_NUM <> 'Pending')
					AND (Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].SMS_FLAG = 'N' OR Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].JOB_EMPLSTATUS = 'T') THEN
					SET OutputRoot.MQRFH2.usr.TMP_SMS_NUM = Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].TMP_SMS_NUM;				
					PROPAGATE TO TERMINAL 'out4' DELETE NONE;  -- Twilio Delete
					--Update Database.OUTBOUND_HRIS_USER.STG_HRIS_PERSON AS A SET TMP_SMS_NUM = NULL where A.PERSON_ID_EXTERNAL = Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].EMPLOYEE_ID;
				ELSEIF (BOOL_TMP_SMS_NUM = TRUE AND Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].TMP_SMS_NUM = 'Pending')
					AND (Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].SMS_FLAG = 'N' OR Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].JOB_EMPLSTATUS = 'T') THEN
					Update Database.OUTBOUND_HRIS_USER.STG_HRIS_PERSON AS A SET TMP_SMS_NUM = NULL where A.PERSON_ID_EXTERNAL = Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].EMPLOYEE_ID;
				ELSEIF (BOOL_TMP_SMS_NUM = TRUE AND Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].TMP_SMS_NUM = 'Pending')
					AND (Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].SMS_FLAG = 'Y') THEN
					PROPAGATE TO TERMINAL 'out3' DELETE NONE;  -- Twilio Create
--					Update Database.OUTBOUND_HRIS_USER.STG_HRIS_PERSON AS A SET TMP_SMS_NUM = '' where A.PERSON_ID_EXTERNAL = Environment.Variable.SelectQueryOutput.vw_employee_for_IDM[noOfRecordsLoop].EMPLOYEE_ID;
				END IF;
				-- Twilio changes
				PROPAGATE TO TERMINAL 'out';
			END WHILE;
		END IF;

		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
----------------------------------------------------------------------
CREATE COMPUTE MODULE HandleException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.EmailOutputHeader.From = PULLDATA_HRISCache.FROM_EMAIL;
		SET OutputRoot.EmailOutputHeader.To = PULLDATA_HRISCache.TO_EMAIL;
		SET OutputRoot.EmailOutputHeader.Subject = PULLDATA_HRISCache.SUBJECT;
		SET OutputRoot.XMLNSC.HRIS.Exception.ErrorMessage = InputExceptionList;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
-------------------------------------------------------------------------