
-------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE FailureAlertMechanism
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		DECLARE cErrorText CHARACTER '';
		DECLARE CRSTR BLOB CAST(x'0D' AS BLOB CCSID InputRoot.Properties.CodedCharSetId);
		DECLARE LFSTR BLOB CAST(x'0A' AS BLOB CCSID InputRoot.Properties.CodedCharSetId);
		DECLARE CRLF BLOB CRSTR||LFSTR;
		SET CRLF = CAST(X'0A' AS BLOB);
		SET OutputRoot.EmailOutputHeader.Subject = Environment.Variables.Alerts.Subject;
		SET OutputRoot.EmailOutputHeader.From =COALESCE(IDMQueryCache.destinations.emailaddress,IDMCache.destinations.emailaddress);
		SET OutputRoot.EmailOutputHeader.To =(COALESCE(IDMQueryCache.destinations.toaddress,IDMCache.destinations.toaddress)||','||COALESCE(IDMQueryCache.destinations.toaddress1,IDMCache.destinations.toaddress1));
		SET OutputRoot.BLOB.BLOB = Environment.Variables.Alerts.Content ;

		PROPAGATE TO TERMINAL 'out' DELETE NONE;
		SET OutputRoot.EmailOutputHeader=NULL;
		SET OutputRoot.BLOB.BLOB = Environment.Variables.Alerts.Content || CRLF;
		SET OutputLocalEnvironment.Destination.File.Name = SUBSTRING(Environment.Variables.Alert.Type BEFORE '-') || '_' ||'Failure.txt';
		SET OutputLocalEnvironment.Destination.File.Directory = IDMCache.destinations.directory;
		-- CALL CopyEntireMessage();
		PROPAGATE TO TERMINAL 'out1';
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
-------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE FaultAlertMechanism
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		DECLARE cErrorText CHARACTER '';
		DECLARE CRSTR BLOB CAST(x'0D' AS BLOB CCSID InputRoot.Properties.CodedCharSetId);
		DECLARE LFSTR BLOB CAST(x'0A' AS BLOB CCSID InputRoot.Properties.CodedCharSetId);
		DECLARE CRLF BLOB CRSTR||LFSTR;
		SET CRLF = CAST(X'0A' AS BLOB);
		SET OutputRoot.EmailOutputHeader.Subject = Environment.Variables.Alerts.Subject;
		
		SET OutputRoot.EmailOutputHeader.From =COALESCE(IDMQueryCache.destinations.emailaddress,IDMCache.destinations.emailaddress);
		SET OutputRoot.EmailOutputHeader.To =(COALESCE(IDMQueryCache.destinations.toaddress,IDMCache.destinations.toaddress)||','||COALESCE(IDMQueryCache.destinations.toaddress1,IDMCache.destinations.toaddress1));
		
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		

		PROPAGATE TO TERMINAL 'out' DELETE NONE;
		SET OutputRoot.EmailOutputHeader=NULL;
		
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		IF CONTAINS(Environment.Variables.Alert.Type,'ERROR') THEN
			SET OutputLocalEnvironment.Destination.File.Name = SUBSTRING(Environment.Variables.Alert.Type BEFORE '-') || '_' ||'Fault.txt';
		ELSEIF CONTAINS(Environment.Variables.Alert.Type,'SUCCESS') THEN
			SET OutputLocalEnvironment.Destination.File.Name = SUBSTRING(Environment.Variables.Alert.Type BEFORE '-') || '_' ||'Success.txt';
		END IF;

		SET OutputLocalEnvironment.Destination.File.Directory = IDMCache.destinations.directory;
		-- CALL CopyEntireMessage();
		PROPAGATE TO TERMINAL 'out1';
		
		-------sending EmployeeNumber to Queue for TerminateUser OffBoarding Process----
		IF Environment.Variables.Alerts.Subject = Environment.employeeNumber||'_'||'Success for Terminate WebService' THEN
			SET OutputRoot.XMLNSC.HRISData.EmployeeID = Environment.employeeNumber;
			PROPAGATE TO TERMINAL 'out2';
		END IF;
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE FailureAlertsMechanism_SetMQRFH2_FailureAlert
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();

		DELETE FIELD OutputRoot.HTTPResponseHeader;
		SET OutputRoot.MQMD=Environment.variable.MQMD;
		SET OutputRoot.MQRFH2=Environment.variable.MQRFH2;
		--CALL CopyEntireMessage();

		SET OutputRoot.SOAP=InputRoot.SOAP;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
-----------------------------------------------------------------------------------------------------

CREATE COMPUTE MODULE FaultSuccessAlertMechanism_SetMQRFH2_FaultAlert
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN


		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

		DELETE FIELD OutputRoot.HTTPResponseHeader;
		SET OutputRoot.MQMD=Environment.variable.MQMD;
		SET OutputRoot.MQRFH2=Environment.variable.MQRFH2;
		SET OutputRoot.XMLNSC=InputRoot.XMLNSC;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;