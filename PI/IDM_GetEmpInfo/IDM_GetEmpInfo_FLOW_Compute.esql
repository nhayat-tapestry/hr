

DECLARE IDM_HRIS_GetEmployeeId_Cache SHARED ROW;
DECLARE isIDM_HRIS_GetEmployeeId_CacheExist SHARED BOOLEAN FALSE;

CREATE COMPUTE MODULE IDM_GetEmpInfo_RemLogging
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE envRef REFERENCE TO Environment;
		CALL setConfigurableProperties(envRef);


		DECLARE cTmp CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'HHmmss-ddMMyyyy');
		DECLARE RootElement CHARACTER FIELDNAME(InputRoot.XMLNSC.*[<]);
		DECLARE FirstName CHARACTER InputRoot.XMLNSC.{RootElement}.FirstName;
		DECLARE LastName CHARACTER InputRoot.XMLNSC.{RootElement}.LastName;
		DECLARE EmployeeID CHARACTER InputRoot.XMLNSC.{RootElement}.EmployeeID;
		DECLARE ViewName CHARACTER InputRoot.XMLNSC.{RootElement}.ViewName;
		DECLARE AcquisitionID CHARACTER InputRoot.XMLNSC.{RootElement}.AcquisitionID;
		DECLARE emailId CHARACTER InputRoot.XMLNSC.{RootElement}.Email;
		DECLARE businessId CHARACTER;
		--SET businessId = InputRoot.XMLNSC.{RootElement}.Email;
		SET businessId = SUBSTRING((FirstName||'_'||LastName||'_'||'_'|| EmployeeID || cTmp)FROM 1 FOR 20);
			SET Environment.Variable.FirstName = FirstName;
			SET Environment.Variable.LastName = LastName;
			SET Environment.Variable.EmployeeID = EmployeeID;
			SET Environment.Variable.ViewName = ViewName;
			SET Environment.Variable.AcquisitionID = AcquisitionID;
			SET Environment.Variable.emailId = emailId;
			SET Environment.Variable.RootElement = RootElement;
			CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'MQRFH2';
			SET OutputRoot.MQRFH2.(MQRFH2.Field)Version = 2;
			SET OutputRoot.MQRFH2.(MQRFH2.Field)Format = 'MQHRF2';
			SET OutputRoot.MQRFH2.(MQRFH2.Field)NameValueCCSID = 1208;
			SET OutputRoot.MQRFH2.usr.BusinessID = businessId;
			SET OutputRoot.MQRFH2.usr.ID = businessId;
			SET OutputRoot.MQRFH2.usr.PROP_CCSID = InputRoot.Properties.CodedCharSetId;
			SET OutputRoot.MQRFH2.usr.PROP_ENCOD = InputRoot.Properties.Encoding;
			SET Environment.Variables.MQRFH2 = OutputRoot.MQRFH2;
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			SET Environment.Variables.OriginalInput = InputRoot.XMLNSC;
			DECLARE complexEventTemp REFERENCE TO InputRoot.XMLNSC;
			DECLARE msgbitstream BLOB ASBITSTREAM (complexEventTemp);
			DECLARE charmsg CHARACTER CAST (msgbitstream AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
			SET Environment.Variables.msgchar =charmsg;
		END;

		CREATE PROCEDURE CopyMessageHeaders() BEGIN
			DECLARE I INTEGER 1;
			DECLARE J INTEGER;
			SET J = CARDINALITY(InputRoot.*[]);
			WHILE I < J DO
				SET OutputRoot.*[I] = InputRoot.*[I];
				SET I = I + 1;
			END WHILE;
		END;

		CREATE PROCEDURE CopyEntireMessage() BEGIN
			SET OutputRoot = InputRoot;
		END;
		CREATE PROCEDURE setConfigurableProperties(INOUT Environment REFERENCE)

		BEGIN
			IF isIDM_HRIS_GetEmployeeId_CacheExist THEN

			ELSE
				--SET Environment.Variable.Destination[] = SELECT T.IDENTIFIER,T.ATTRIBUTES FROM Database.dbo.ESB_CONFIG as T WHERE T.INTERFACE= 'IDM';
				SET Environment.Variable.Destination[] = SELECT T.IDENTIFIER,T.ATTRIBUTES FROM Database.ESB_CONFIG as T WHERE T.INTERFACE= 'IDM';
				--SET Environment.Variables.Destination[]= SELECT T.IDENTIFIER,T.ATTRIBUTES FROM Database.dbo.ESB_CONFIG as T WHERE T.INTERFACE= 'HRIS';
				SET Environment.Variables.Destination[]= SELECT T.IDENTIFIER,T.ATTRIBUTES FROM Database.ESB_CONFIG as T WHERE T.INTERFACE= 'HRIS';
				DECLARE noOfRecords INTEGER CARDINALITY(Environment.Variable.Destination[]);
				DECLARE numOfRecords INTEGER CARDINALITY (Environment.Variables.Destination[]);
				IF numOfRecords ='0' THEN
					THROW USER EXCEPTION MESSAGE 1000 VALUES
					('No Rows found in ESB_CONFIG for interface-IDM to fetch');
				ELSE

					DECLARE i INTEGER 1;

					WHILE i <= numOfRecords DO

						IF Environment.Variables.Destination[i].IDENTIFIER ='SCHEMA' THEN
							SET IDM_HRIS_GetEmployeeId_Cache.destinations.SCHEMA =Environment.Variables.Destination[i].ATTRIBUTES;
						END IF;


						SET i = i + 1;
					END WHILE;
				END IF;
				IF noOfRecords ='0' THEN
					THROW USER EXCEPTION MESSAGE 1000 VALUES
					('No Rows found in ESB_CONFIG for interface-IDM to fetch');
				ELSE
					DECLARE i INTEGER 1;

					WHILE i <= noOfRecords DO

						IF Environment.Variable.Destination[i].IDENTIFIER ='FROM_EMAIL' THEN
							SET IDM_HRIS_GetEmployeeId_Cache.destinations.fromaddress =Environment.Variable.Destination[i].ATTRIBUTES;
						END IF;

						IF Environment.Variable.Destination[i].IDENTIFIER ='TO_EMAIL' THEN
							SET IDM_HRIS_GetEmployeeId_Cache.destinations.toaddress =Environment.Variable.Destination[i].ATTRIBUTES;
						END IF;

						IF Environment.Variable.Destination[i].IDENTIFIER ='USERNAME' THEN
							SET IDM_HRIS_GetEmployeeId_Cache.destinations.username =Environment.Variable.Destination[i].ATTRIBUTES;
						END IF;

						IF Environment.Variable.Destination[i].IDENTIFIER ='PASSWORD' THEN
							SET IDM_HRIS_GetEmployeeId_Cache.destinations.password =Environment.Variable.Destination[i].ATTRIBUTES;
						END IF;
						SET i = i + 1;
					END WHILE;
				END IF;

				SET isIDM_HRIS_GetEmployeeId_CacheExist = TRUE;
			END IF;
		END;
	END MODULE;
	--------------------------------------------------------------
	CREATE COMPUTE MODULE IDM_GetEmpInfo_BasAuth
		CREATE FUNCTION Main() RETURNS BOOLEAN
		BEGIN
			CALL CopyMessageHeaders();
			-- CALL CopyEntireMessage();
			DECLARE RootElement CHARACTER FIELDNAME(InputRoot.XMLNSC.*[<]);
			SET Environment.Variables.AuthorizationHeader = InputRoot.HTTPInputHeader.Authorization;
			SET Environment.Variables.Authentication = CAST(BASE64DECODE(SUBSTRING(InputRoot.HTTPInputHeader.Authorization FROM 7))AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			DECLARE COLONPosition INTEGER POSITION(':' IN Environment.Variables.Authentication);
			SET Environment.Variables.Username = SUBSTRING(Environment.Variables.Authentication FROM 1 FOR COLONPosition-1);
			SET Environment.Variables.Password = SUBSTRING(Environment.Variables.Authentication FROM COLONPosition+1);
			IF (Environment.Variables.Username = IDM_HRIS_GetEmployeeId_Cache.destinations.username) AND (Environment.Variables.Password = IDM_HRIS_GetEmployeeId_Cache.destinations.password)
				THEN
				DECLARE SCHEMA_NAME CHARACTER IDM_HRIS_GetEmployeeId_Cache.destinations.SCHEMA;
				DECLARE FirstName CHARACTER Environment.Variable.FirstName;
				DECLARE LastName CHARACTER Environment.Variable.LastName;
				DECLARE EmployeeID CHARACTER Environment.Variable.EmployeeID;
				DECLARE ViewName CHARACTER Environment.Variable.ViewName;
				DECLARE AcquisitionID CHARACTER Environment.Variable.AcquisitionID;
				DECLARE emailId CHARACTER Environment.Variable.emailId;
				-- ELSEIF (((FirstName IS NULL) OR (TRIM(FirstName) = '')) AND ((LastName IS NULL) OR (TRIM(LastName) = '')) AND ((EmployeeID IS NOT NULL) AND (TRIM(EmployeeID) <> '')) AND ((ViewName IS NOT NULL) ) ) THEN
				-- DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
				-- where (
				-- PERSON_ID_EXTERNAL = '||EmployeeID ||'
				-- )';
				-- SET Environment.RS=PASSTHRU(query);

				IF (( (FirstName IS NOT NULL) AND (TRIM(FirstName) <> '')) AND ((LastName IS NOT NULL) AND (TRIM(LastName) <> '')) AND ((EmployeeID IS NOT NULL) AND (TRIM(EmployeeID) <> '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NOT NULL) AND (TRIM(AcquisitionID) <> '')) ) THEN
					DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
					where(

					( PERSON_ID_EXTERNAL = '||EmployeeID ||' AND UPPER(PERSONAL_FIRST_NAME) = UPPER( '''||FirstName||''') AND UPPER(PERSONAL_LAST_NAME) = UPPER( '''||LastName||''') AND EMPLOYMENT_CUSTOM_STRING9ACQID = '|| AcquisitionID ||' )

					)';
					SET Environment.RS=PASSTHRU(query);

				ELSEIF (((FirstName IS NOT NULL) AND (TRIM(FirstName) <> '')) AND ((LastName IS NULL) OR (TRIM(LastName) = '')) AND ((EmployeeID IS NOT NULL) AND (TRIM(EmployeeID) <> '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NOT NULL) AND (TRIM(AcquisitionID) <> '')) ) THEN
					DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
					where (
					PERSON_ID_EXTERNAL = '||EmployeeID ||' AND UPPER(PERSONAL_FIRST_NAME) = UPPER( '''||FirstName||''') AND EMPLOYMENT_CUSTOM_STRING9ACQID = '|| AcquisitionID ||'
					)';
					SET Environment.RS=PASSTHRU(query);

				ELSEIF (((FirstName IS NULL) OR (TRIM(FirstName) = '')) AND ((LastName IS NOT NULL) AND (TRIM(LastName) <> '')) AND ((EmployeeID IS NOT NULL) AND (TRIM(EmployeeID) <> '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NOT NULL) AND (TRIM(AcquisitionID) <> '')) ) THEN
					DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
					where (
					PERSON_ID_EXTERNAL = '||EmployeeID ||' AND UPPER(PERSONAL_LAST_NAME) = UPPER( '''||LastName||''') AND EMPLOYMENT_CUSTOM_STRING9ACQID = '|| AcquisitionID ||'
					)';
					SET Environment.RS=PASSTHRU(query);

				ELSEIF (((FirstName IS NOT NULL) AND (TRIM(FirstName) <> '')) AND ((LastName IS NOT NULL) AND (TRIM(LastName) <> '')) AND ((EmployeeID IS NULL) OR (TRIM(EmployeeID) = '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NOT NULL) AND (TRIM(AcquisitionID) <> '')) ) THEN
					DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
					where (
					UPPER(PERSONAL_FIRST_NAME) = UPPER( '''||FirstName||''') AND UPPER(PERSONAL_LAST_NAME) = UPPER( '''||LastName||''') AND EMPLOYMENT_CUSTOM_STRING9ACQID = '|| AcquisitionID ||'
					)';
					SET Environment.RS=PASSTHRU(query);

				ELSEIF (((FirstName IS NOT NULL) AND (TRIM(FirstName) <> '')) AND ((LastName IS NULL) OR (TRIM(LastName) = '')) AND ((EmployeeID IS NULL) OR (TRIM(EmployeeID) = '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NOT NULL) AND (TRIM(AcquisitionID) <> '')) ) THEN
					DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
					where (
					UPPER(PERSONAL_FIRST_NAME) = UPPER( '''||FirstName||''') AND EMPLOYMENT_CUSTOM_STRING9ACQID = '|| AcquisitionID ||'
					)';
					SET Environment.RS=PASSTHRU(query);

				ELSEIF (((FirstName IS NULL) OR (TRIM(FirstName) = '')) AND ((LastName IS NOT NULL) AND (TRIM(LastName) <> '')) AND ((EmployeeID IS NULL)OR (TRIM(EmployeeID) = '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NOT NULL) AND (TRIM(AcquisitionID) <> '')) ) THEN
					DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
					where (
					UPPER(PERSONAL_LAST_NAME) = UPPER( '''||LastName||''') AND EMPLOYMENT_CUSTOM_STRING9ACQID = '|| AcquisitionID ||'
					)';
					SET Environment.RS=PASSTHRU(query);

		        ELSEIF (((FirstName IS NULL) OR (TRIM(FirstName) = '')) AND ((LastName IS NULL) OR (TRIM(LastName) = '')) AND ((EmployeeID IS NOT NULL) AND (TRIM(EmployeeID) <> '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NOT NULL) AND (TRIM(AcquisitionID) <> '')) ) THEN
						DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
						where (
						PERSON_ID_EXTERNAL IN( '||EmployeeID || ' ) AND EMPLOYMENT_CUSTOM_STRING9ACQID IN( '|| AcquisitionID ||')
						)';
						SET Environment.RS=PASSTHRU(query);
						-----------------------------------ADDING BELOW ELSEIF WITH ACQUISITIONID AS OPTIONAL(NULL) AND VIEWNAME IS MANDATORY(NOT NULL)------------------------------------------				


					ELSEIF (((FirstName IS NOT NULL) AND (TRIM(FirstName) <> '')) AND ((LastName IS NULL) OR (TRIM(LastName) = '')) AND ((EmployeeID IS NOT NULL) AND (TRIM(EmployeeID) <> '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NULL) OR (TRIM(AcquisitionID) = '')) ) THEN
						DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
						where (
						PERSON_ID_EXTERNAL = '||EmployeeID ||' AND UPPER(PERSONAL_FIRST_NAME) = UPPER( '''||FirstName||''')
						)';
						SET Environment.RS=PASSTHRU(query);

					ELSEIF (((FirstName IS NULL) OR (TRIM(FirstName) = '')) AND ((LastName IS NOT NULL) AND (TRIM(LastName) <> '')) AND ((EmployeeID IS NOT NULL) AND (TRIM(EmployeeID) <> '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NULL) OR (TRIM(AcquisitionID) = '')) ) THEN
						DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
						where (
						PERSON_ID_EXTERNAL = '||EmployeeID ||' AND UPPER(PERSONAL_LAST_NAME) = UPPER( '''||LastName||''')
						)';
						SET Environment.RS=PASSTHRU(query);

					ELSEIF (((FirstName IS NOT NULL) AND (TRIM(FirstName) <> '')) AND ((LastName IS NOT NULL) AND (TRIM(LastName) <> '')) AND ((EmployeeID IS NULL) OR (TRIM(EmployeeID) = '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NULL) OR (TRIM(AcquisitionID) = '')) ) THEN
						DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
						where (
						UPPER(PERSONAL_FIRST_NAME) = UPPER( '''||FirstName||''') AND UPPER(PERSONAL_LAST_NAME) = UPPER( '''||LastName||''')
						)';
						SET Environment.RS=PASSTHRU(query);

					ELSEIF (((FirstName IS NOT NULL) AND (TRIM(FirstName) <> '')) AND ((LastName IS NULL) OR (TRIM(LastName) = '')) AND ((EmployeeID IS NULL) OR (TRIM(EmployeeID) = '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NULL) OR (TRIM(AcquisitionID) = '')) ) THEN
						DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
						where (
						UPPER(PERSONAL_FIRST_NAME) = UPPER( '''||FirstName||''')
						)';
						SET Environment.RS=PASSTHRU(query);

					ELSEIF (((FirstName IS NULL) OR (TRIM(FirstName) = '')) AND ((LastName IS NOT NULL) AND (TRIM(LastName) <> '')) AND ((EmployeeID IS NULL)OR (TRIM(EmployeeID) = '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NULL) OR (TRIM(AcquisitionID) = '')) ) THEN
						DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
						where (
						UPPER(PERSONAL_LAST_NAME) = UPPER( '''||LastName||''')
						)';
						SET Environment.RS=PASSTHRU(query);

					ELSEIF (((FirstName IS NULL) OR (TRIM(FirstName) = '')) AND ((LastName IS NULL) OR (TRIM(LastName) = '')) AND ((EmployeeID IS NOT NULL) AND (TRIM(EmployeeID) <> '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NULL) OR (TRIM(AcquisitionID) = '')) ) THEN
						DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
						where (
						PERSON_ID_EXTERNAL IN( '||EmployeeID || ' )
						)';
						SET Environment.RS=PASSTHRU(query);
						-----------------------------------------------ENDED----------------------------------------------

					ELSEIF (((FirstName IS NULL) OR (TRIM(FirstName) = '')) AND ((LastName IS NULL) OR (TRIM(LastName) = '')) AND ((EmployeeID IS NULL) OR (TRIM(EmployeeID) = '')) AND ((ViewName IS NOT NULL)) AND ((AcquisitionID IS NOT NULL) AND (TRIM(AcquisitionID) <> '')) ) THEN
						DECLARE query CHARACTER ' SELECT * FROM '||ViewName||'
						where (
						EMPLOYMENT_CUSTOM_STRING9ACQID IN ( '||AcquisitionID || ' )
						)';
						SET Environment.RS=PASSTHRU(query);					
					
					
					
						-- IF CONTAINS(EmployeeID, ',') THEN
						-- DECLARE comma_position INTEGER 1;
						-- DECLARE prev_count_position INTEGER 0;
						-- DECLARE repeat_count INTEGER 1;
						-- WHILE comma_position > 0 DO
						-- SET comma_position = POSITION(',' IN EmployeeID REPEAT repeat_count) ;
						-- IF comma_position > 0 THEN
						-- DECLARE stringLength INTEGER comma_position-(prev_count_position + 1);
						-- DECLARE EMPID CHARACTER SUBSTRING(InputRoot.XMLNSC.GetEmployeeInfo.EmployeeID FROM prev_count_position + 1 FOR stringLength );
						-- END IF;
						-- SET prev_count_position = comma_position ;
						-- SET repeat_count = repeat_count +1;
						-- END WHILE;
						--
						-- ELSE
						--
						-- SET Environment.RS=PASSTHRU(query);
						-- END IF;



					END IF;

					DECLARE noOfRecords INTEGER CARDINALITY (Environment.RS[]);
					IF noOfRecords > 0 THEN
						DECLARE i INTEGER 1;
						WHILE i <= noOfRecords DO
							SET OutputRoot.XMLNSC.EmpInfo.Employee[i] = Environment.RS[i] ;

							SET i = i + 1;
						END WHILE;
					ELSE
						CREATE FIELD OutputRoot.XMLNSC.Details.{RootElement}.status TYPE NameValue VALUE 'No rows to fetch from HRIS';
					END IF;
					PROPAGATE TO TERMINAL 'out';
				ELSE
					CREATE FIELD OutputRoot.XMLNSC.Details.{RootElement}.status TYPE NameValue VALUE 'Authentication Failed';
					PROPAGATE TO TERMINAL 'out';
				END IF;
				RETURN FALSE;
			END;

			CREATE PROCEDURE CopyMessageHeaders() BEGIN
				DECLARE I INTEGER 1;
				DECLARE J INTEGER;
				SET J = CARDINALITY(InputRoot.*[]);
				WHILE I < J DO
					SET OutputRoot.*[I] = InputRoot.*[I];
					SET I = I + 1;
				END WHILE;
			END;

			CREATE PROCEDURE CopyEntireMessage() BEGIN
				SET OutputRoot = InputRoot;
			END;
		END MODULE;
		-----------------------------------------------------------
		CREATE COMPUTE MODULE IDM_GetEmpInfo_RemoveMQRFH2
			CREATE FUNCTION Main() RETURNS BOOLEAN
			BEGIN
				CALL CopyMessageHeaders();
				DECLARE RootElement CHARACTER FIELDNAME(InputRoot.XMLNSC.*[<]);
				IF InputRoot.XMLNSC.{RootElement}.status = 'Authentication Failed' THEN
					SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 401;
				END IF;
				IF InputRoot.XMLNSC.{RootElement}.status = 'FAILURE' THEN
					SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 400;
				END IF;
				SET OutputRoot.MQMD = NULL;
				SET OutputRoot.MQRFH2 = NULL;


				SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
				RETURN TRUE;
			END;

			CREATE PROCEDURE CopyMessageHeaders() BEGIN
				DECLARE I INTEGER 1;
				DECLARE J INTEGER;
				SET J = CARDINALITY(InputRoot.*[]);
				WHILE I < J DO
					SET OutputRoot.*[I] = InputRoot.*[I];
					SET I = I + 1;
				END WHILE;
			END;

			CREATE PROCEDURE CopyEntireMessage() BEGIN
				SET OutputRoot = InputRoot;
			END;
		END MODULE;
		---------------------------------------------------------------------
		CREATE COMPUTE MODULE ErrorHandler_GetEmpInfo
			CREATE FUNCTION Main() RETURNS BOOLEAN
			BEGIN
				-- CALL CopyMessageHeaders();
				CALL CopyMessageHeaders();
				-- CALL CopyEntireMessage();

				DECLARE ref REFERENCE TO Environment.Variables.MQRFH2;
				DECLARE Text CHAR '';
				DECLARE InsertText CHAR '';
				DECLARE cErrorText CHARACTER '';
				DECLARE RootElement CHARACTER '';
				SET RootElement = Environment.Variable.RootElement;
				CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'MQRFH2';

				IF LASTMOVE(ref) = TRUE THEN
					SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;
				ELSE
					SET OutputRoot.MQRFH2.(MQRFH2.Field)Version = 2;
					SET OutputRoot.MQRFH2.(MQRFH2.Field)Format = 'MQHRF2';
					SET OutputRoot.MQRFH2.(MQRFH2.Field)NameValueCCSID = 1208;
					SET OutputRoot.MQRFH2.usr.BusinessID = Environment.Variable.EmployeeID;
					SET OutputRoot.MQRFH2.usr.PROP_CCSID = InputRoot.Properties.Encoding;
					SET OutputRoot.MQRFH2.usr.PROP_ENCOD = InputRoot.Properties.CodedCharSetId;
				END IF;

				DECLARE Listhandle REFERENCE TO InputExceptionList.*[1];
				WHILE Listhandle.Text IS NOT NULL DO
					SET Text = Text || ' ' || Listhandle.Text || ' ';
					DECLARE insertCount INTEGER CARDINALITY(Listhandle.Insert[]);
					IF insertCount > 0 THEN
						SET Text = Text || ' ' ||Listhandle.Insert[insertCount].Text || ' ';
					END IF;
					MOVE Listhandle LASTCHILD;
				END WHILE;
				----------------------Error Responses------------------------
				-- SET OutputRoot.Properties = InputRoot.Properties;
				-- SET Environment.Variables.Status = '1';
				-- SET Environment.Variables.StatusDescription = 'FAILURE';
				CREATE FIELD OutputRoot.XMLNSC.Details.{RootElement}.status TYPE NameValue VALUE 'FAILURE';
				PROPAGATE TO TERMINAL 'out1' DELETE NONE;
				----------------------Error Responses------------------------

				SET OutputRoot.EmailOutputHeader.Subject = 'IDM Get Employee Info Failure';
				SET OutputRoot.EmailOutputHeader.From = IDM_HRIS_GetEmployeeId_Cache.destinations.fromaddress;
				SET OutputRoot.EmailOutputHeader.To = IDM_HRIS_GetEmployeeId_Cache.destinations.toaddress;
				SET cErrorText = ' Error Description : ' || Text;
				SET OutputRoot.BLOB.BLOB = CAST( cErrorText AS BLOB CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
				SET OutputRoot.XMLNSC =NULL;
				PROPAGATE TO TERMINAL 'out';

				RETURN FALSE;


			END;

			CREATE PROCEDURE CopyMessageHeaders() BEGIN
				DECLARE I INTEGER 1;
				DECLARE J INTEGER;
				SET J = CARDINALITY(InputRoot.*[]);
				WHILE I < J DO
					SET OutputRoot.*[I] = InputRoot.*[I];
					SET I = I + 1;
				END WHILE;
			END;

			CREATE PROCEDURE CopyEntireMessage() BEGIN
				SET OutputRoot = InputRoot;
			END;
		END MODULE;
		------------------------------------------------------------------------------------------------------------------